---
title: "Consultando la OpenAI API"
format: html
editor: visual
---

## *Ejemplos de la documentación de OpenAI*

El siguiente chink es innecesario. Sólo es un ejemplo Curl de la documentación de OpenAI. cURL es una herramienta para bajar cosas de Internet, funciona entre la pc local y los servidores web. Se le indica la dirección web (URL) y descarga la información.

```{bash}
curl https://api.openai.com/v1/chat/completions \
-H "Content-Type: application/json" \
-H "Authorization: Bearer $OPENAI_API_KEY" \
-d '{
"model": "gpt-3.5-turbo",
"messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hello!"}]
}'
```

El siguiente chunk tampoco se corre. Tiene la el mismo payload dusado en el ejemplo de cURL de arriba para interactuar con la API.

```{json}
{
  "model": "gpt-3.5-turbo",
  "messages": [{"role": "system", "content": "You are a helpful assistant."}, {"role": "user", "content": "Hello!"}]
}
```

## *Cargar paquetes*

* tidyverse
* httr2: Tools for creating and modifying HTTP requests, then performing them and processing the results.
* usethis: Automate package and project setup tasks that are otherwise performed manually. This includes setting up unit testing, test coverage, continuous integration, Git, 'GitHub', licenses, 'Rcpp', 'RStudio' projects, and more.
* devtools: The aim of devtools is to make package development easier by providing R functions that simplify and expedite common tasks.
* gert: The gert R package acts as a simple client for interacting with Git repositories directly within your R environment. 

```{r}
library(httr2)
```

## *API Query Function*

El siguiente chunk toma un mensaje como input, genera la request para la API con la autenticación y el modelo a usar, envía el request, constructs the API request with your authentication and desired model, sends the request, analiza la respuesta y devuelve el texto de la respuesta.

```{r}
chat <- function(message) {  #define una función llamada chat, con el argumento "mensaje", sera el user prompt
  user_message <- list(list(role = "user", content = message)) #nested list, la más interna contiene el rol (usuario del chat y el contenido de su mensaje o prompt)
  base_url <- "https://api.openai.com/v1"  #simplemente la url de OpenAI
  api_key <- Sys.getenv("OPENAI_API_KEY") #recupera la key sin exponerla, fue seteada antes con usethis.
  body <- list(model = "gpt-3.5-turbo",  #esta list tiene la solicitud a la API, indica el LLM a usar y...
               messages = user_message)  #  refiere a la list anterior (user_message)  
  req <- request(base_url) # refiere a la url ya definida antes e indica la solicitud http a la API
  resp <-  # Empieza la solicitud
    req |> 
    req_url_path_append("chat/completions") |>   #indica el endpoint 
    req_auth_bearer_token(token = api_key) |>   # yo soy el bearer, se indica el token ya definido antes
    req_headers("Content-Type" = "application/json") |> # indica que la solicitud tendra formato json
    req_user_agent("Sebastian Varela | varela.sebastian@gmail.com") |> #datos de contacto por si transgredo algo
    req_body_json(body) |>   # transforma el request en json, el request está en la lists (contenido y modelo)
    req_retry(max_tries = 4) |> # indica cuantos reintentos de request se hacen si hay errores de red
    req_throttle(rate = 15) |>  # envia cada reintento cada 15 seg. para no saturar la API
    req_perform() #ejecuta el HTTP request
  
  openai_chat_response <- resp |> resp_body_json(simplifyVector = TRUE) #extrae la respuesta de la API y transforma el formato de json a R.
  
  openai_chat_response$choices$message$content  #accede al elemento "choices" de la respuesta, luego al elemento "message", y luego al elemento "content", recuperando la respuesta..
}
```

## *Test API*

```{r}
chat("What is your favorite club?")
```